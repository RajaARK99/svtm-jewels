/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as PublicRouteRouteImport } from './routes/_public/route'
import { Route as PrivateRouteRouteImport } from './routes/_private/route'
import { Route as PrivateIndexRouteImport } from './routes/_private/index'
import { Route as ApiSplatRouteImport } from './routes/api/$'
import { Route as ApiRpcSplatRouteImport } from './routes/api/rpc.$'
import { Route as ApiAuthSplatRouteImport } from './routes/api/auth/$'
import { Route as PublicAuthSignInRouteImport } from './routes/_public/auth/sign-in'
import { Route as PrivateSettingsUsersRouteImport } from './routes/_private/settings/users'
import { Route as PrivateSettingsEmployeesRouteImport } from './routes/_private/settings/employees'
import { Route as PrivateSettingsAttendanceRouteImport } from './routes/_private/settings/attendance'
import { Route as PrivateIncentiveSalesRouteImport } from './routes/_private/incentive/sales'
import { Route as PrivateIncentiveConvertingRouteImport } from './routes/_private/incentive/converting'

const PublicRouteRoute = PublicRouteRouteImport.update({
  id: '/_public',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateRouteRoute = PrivateRouteRouteImport.update({
  id: '/_private',
  getParentRoute: () => rootRouteImport,
} as any)
const PrivateIndexRoute = PrivateIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PrivateRouteRoute,
} as any)
const ApiSplatRoute = ApiSplatRouteImport.update({
  id: '/api/$',
  path: '/api/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiRpcSplatRoute = ApiRpcSplatRouteImport.update({
  id: '/api/rpc/$',
  path: '/api/rpc/$',
  getParentRoute: () => rootRouteImport,
} as any)
const ApiAuthSplatRoute = ApiAuthSplatRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootRouteImport,
} as any)
const PublicAuthSignInRoute = PublicAuthSignInRouteImport.update({
  id: '/auth/sign-in',
  path: '/auth/sign-in',
  getParentRoute: () => PublicRouteRoute,
} as any)
const PrivateSettingsUsersRoute = PrivateSettingsUsersRouteImport.update({
  id: '/settings/users',
  path: '/settings/users',
  getParentRoute: () => PrivateRouteRoute,
} as any)
const PrivateSettingsEmployeesRoute =
  PrivateSettingsEmployeesRouteImport.update({
    id: '/settings/employees',
    path: '/settings/employees',
    getParentRoute: () => PrivateRouteRoute,
  } as any)
const PrivateSettingsAttendanceRoute =
  PrivateSettingsAttendanceRouteImport.update({
    id: '/settings/attendance',
    path: '/settings/attendance',
    getParentRoute: () => PrivateRouteRoute,
  } as any)
const PrivateIncentiveSalesRoute = PrivateIncentiveSalesRouteImport.update({
  id: '/incentive/sales',
  path: '/incentive/sales',
  getParentRoute: () => PrivateRouteRoute,
} as any)
const PrivateIncentiveConvertingRoute =
  PrivateIncentiveConvertingRouteImport.update({
    id: '/incentive/converting',
    path: '/incentive/converting',
    getParentRoute: () => PrivateRouteRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/api/$': typeof ApiSplatRoute
  '/': typeof PrivateIndexRoute
  '/incentive/converting': typeof PrivateIncentiveConvertingRoute
  '/incentive/sales': typeof PrivateIncentiveSalesRoute
  '/settings/attendance': typeof PrivateSettingsAttendanceRoute
  '/settings/employees': typeof PrivateSettingsEmployeesRoute
  '/settings/users': typeof PrivateSettingsUsersRoute
  '/auth/sign-in': typeof PublicAuthSignInRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
}
export interface FileRoutesByTo {
  '/api/$': typeof ApiSplatRoute
  '/': typeof PrivateIndexRoute
  '/incentive/converting': typeof PrivateIncentiveConvertingRoute
  '/incentive/sales': typeof PrivateIncentiveSalesRoute
  '/settings/attendance': typeof PrivateSettingsAttendanceRoute
  '/settings/employees': typeof PrivateSettingsEmployeesRoute
  '/settings/users': typeof PrivateSettingsUsersRoute
  '/auth/sign-in': typeof PublicAuthSignInRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_private': typeof PrivateRouteRouteWithChildren
  '/_public': typeof PublicRouteRouteWithChildren
  '/api/$': typeof ApiSplatRoute
  '/_private/': typeof PrivateIndexRoute
  '/_private/incentive/converting': typeof PrivateIncentiveConvertingRoute
  '/_private/incentive/sales': typeof PrivateIncentiveSalesRoute
  '/_private/settings/attendance': typeof PrivateSettingsAttendanceRoute
  '/_private/settings/employees': typeof PrivateSettingsEmployeesRoute
  '/_private/settings/users': typeof PrivateSettingsUsersRoute
  '/_public/auth/sign-in': typeof PublicAuthSignInRoute
  '/api/auth/$': typeof ApiAuthSplatRoute
  '/api/rpc/$': typeof ApiRpcSplatRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/api/$'
    | '/'
    | '/incentive/converting'
    | '/incentive/sales'
    | '/settings/attendance'
    | '/settings/employees'
    | '/settings/users'
    | '/auth/sign-in'
    | '/api/auth/$'
    | '/api/rpc/$'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/api/$'
    | '/'
    | '/incentive/converting'
    | '/incentive/sales'
    | '/settings/attendance'
    | '/settings/employees'
    | '/settings/users'
    | '/auth/sign-in'
    | '/api/auth/$'
    | '/api/rpc/$'
  id:
    | '__root__'
    | '/_private'
    | '/_public'
    | '/api/$'
    | '/_private/'
    | '/_private/incentive/converting'
    | '/_private/incentive/sales'
    | '/_private/settings/attendance'
    | '/_private/settings/employees'
    | '/_private/settings/users'
    | '/_public/auth/sign-in'
    | '/api/auth/$'
    | '/api/rpc/$'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  PrivateRouteRoute: typeof PrivateRouteRouteWithChildren
  PublicRouteRoute: typeof PublicRouteRouteWithChildren
  ApiSplatRoute: typeof ApiSplatRoute
  ApiAuthSplatRoute: typeof ApiAuthSplatRoute
  ApiRpcSplatRoute: typeof ApiRpcSplatRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_public': {
      id: '/_public'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PublicRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private': {
      id: '/_private'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof PrivateRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_private/': {
      id: '/_private/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof PrivateIndexRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/api/$': {
      id: '/api/$'
      path: '/api/$'
      fullPath: '/api/$'
      preLoaderRoute: typeof ApiSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/rpc/$': {
      id: '/api/rpc/$'
      path: '/api/rpc/$'
      fullPath: '/api/rpc/$'
      preLoaderRoute: typeof ApiRpcSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_public/auth/sign-in': {
      id: '/_public/auth/sign-in'
      path: '/auth/sign-in'
      fullPath: '/auth/sign-in'
      preLoaderRoute: typeof PublicAuthSignInRouteImport
      parentRoute: typeof PublicRouteRoute
    }
    '/_private/settings/users': {
      id: '/_private/settings/users'
      path: '/settings/users'
      fullPath: '/settings/users'
      preLoaderRoute: typeof PrivateSettingsUsersRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/_private/settings/employees': {
      id: '/_private/settings/employees'
      path: '/settings/employees'
      fullPath: '/settings/employees'
      preLoaderRoute: typeof PrivateSettingsEmployeesRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/_private/settings/attendance': {
      id: '/_private/settings/attendance'
      path: '/settings/attendance'
      fullPath: '/settings/attendance'
      preLoaderRoute: typeof PrivateSettingsAttendanceRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/_private/incentive/sales': {
      id: '/_private/incentive/sales'
      path: '/incentive/sales'
      fullPath: '/incentive/sales'
      preLoaderRoute: typeof PrivateIncentiveSalesRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
    '/_private/incentive/converting': {
      id: '/_private/incentive/converting'
      path: '/incentive/converting'
      fullPath: '/incentive/converting'
      preLoaderRoute: typeof PrivateIncentiveConvertingRouteImport
      parentRoute: typeof PrivateRouteRoute
    }
  }
}

interface PrivateRouteRouteChildren {
  PrivateIndexRoute: typeof PrivateIndexRoute
  PrivateIncentiveConvertingRoute: typeof PrivateIncentiveConvertingRoute
  PrivateIncentiveSalesRoute: typeof PrivateIncentiveSalesRoute
  PrivateSettingsAttendanceRoute: typeof PrivateSettingsAttendanceRoute
  PrivateSettingsEmployeesRoute: typeof PrivateSettingsEmployeesRoute
  PrivateSettingsUsersRoute: typeof PrivateSettingsUsersRoute
}

const PrivateRouteRouteChildren: PrivateRouteRouteChildren = {
  PrivateIndexRoute: PrivateIndexRoute,
  PrivateIncentiveConvertingRoute: PrivateIncentiveConvertingRoute,
  PrivateIncentiveSalesRoute: PrivateIncentiveSalesRoute,
  PrivateSettingsAttendanceRoute: PrivateSettingsAttendanceRoute,
  PrivateSettingsEmployeesRoute: PrivateSettingsEmployeesRoute,
  PrivateSettingsUsersRoute: PrivateSettingsUsersRoute,
}

const PrivateRouteRouteWithChildren = PrivateRouteRoute._addFileChildren(
  PrivateRouteRouteChildren,
)

interface PublicRouteRouteChildren {
  PublicAuthSignInRoute: typeof PublicAuthSignInRoute
}

const PublicRouteRouteChildren: PublicRouteRouteChildren = {
  PublicAuthSignInRoute: PublicAuthSignInRoute,
}

const PublicRouteRouteWithChildren = PublicRouteRoute._addFileChildren(
  PublicRouteRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  PrivateRouteRoute: PrivateRouteRouteWithChildren,
  PublicRouteRoute: PublicRouteRouteWithChildren,
  ApiSplatRoute: ApiSplatRoute,
  ApiAuthSplatRoute: ApiAuthSplatRoute,
  ApiRpcSplatRoute: ApiRpcSplatRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
